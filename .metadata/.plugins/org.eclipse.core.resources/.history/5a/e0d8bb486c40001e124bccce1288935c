package com.init.gimnasio.servicio;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.init.gimnasio.interfaces.ILogin;
import com.init.gimnasio.modelo.Login;
import com.init.gimnasio.modelo.RolUsuario;

@Service
public class LoginService implements UserDetailsService {
	
	@Autowired
	private ILogin repo;
	
	public Login loginusuario(String usu, String pass) {
		Login usuarioservice = repo.findByUsernameAndPassword(usu, pass);
		return usuarioservice;
	}
	
	public LoginService(ILogin repo) {
		super();
		this.repo = repo;
	}
	
	/*public UserDetails logeoUsuario(String username) throws UsernameNotFoundException{
		System.out.println("servicionull3");
		Login login = repo.findByUsername(username);
		System.out.println("servicionull4");
		if(login == null) {
			System.out.println("servicionull");
			throw new UsernameNotFoundException("Usuario o contraseña inválido");
		}
		System.out.println("servicionull2");
		return new User(login.getUsername(), login.getPassword(), mapearRolesAutorizacion(login.getRoles()));
	}
	
	private Collection<? extends GrantedAuthority> mapearRolesAutorizacion(Collection<RolUsuario> roles){
		return roles.stream().map(role -> new SimpleGrantedAuthority(role.getNombre())).collect(Collectors.toList());
	}*/
	
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		System.out.println("servicionull8: "+username);
		Login appUser = repo.findByUsername(username).orElseThrow(() -> new UsernameNotFoundException("No existe usuario"));
		System.out.println("servicionull5: "+username);
		List grantList = new ArrayList();
		for (RolUsuario autorizacion: appUser.getRoles()) {
			System.out.println("servicionull6: "+username);
			GrantedAuthority grantedAuthority = new SimpleGrantedAuthority(autorizacion.getNombre());
			grantList.add(grantedAuthority);
			System.out.println("servicionull7: "+grantedAuthority);
		}
		System.out.println("servicionull9: "+username);
		UserDetails user = (UserDetails) new (appUser.getUsername(), appUser.getPassword(), grantList);
		System.out.println("servicionull10: "+username);
		return user;
	}
}