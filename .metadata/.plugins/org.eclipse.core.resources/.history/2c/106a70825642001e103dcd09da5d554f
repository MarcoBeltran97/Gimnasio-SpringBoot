package com.init.gimnasio.servicio;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

import javax.persistence.EntityManager;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.init.gimnasio.interfaces.IDetalleCompra;
import com.init.gimnasio.interfaces.IDetalleCompraCarrito;
import com.init.gimnasio.interfaces.ILogin;
import com.init.gimnasio.interfazServicio.IDetalleCompraService;
import com.init.gimnasio.modelo.DetalleCompra;
import com.init.gimnasio.modelo.DetalleCompraCarrito;
import com.init.gimnasio.modelo.Login;

@Service
public class DetalleCompraService implements IDetalleCompraService {
	
	private DetalleCompraCarrito dcc;
	
	@Autowired
	private ILogin repo;
	
	@Autowired
	private IDetalleCompra iproductocliente;
	
	@Autowired
	private IDetalleCompraCarrito i_dcc;
	
	@Override
	public List<DetalleCompra> listarDetalleCompra() {
		return (List<DetalleCompra>)iproductocliente.findAll();
	}
	
	//Listar por ID
	public List<DetalleCompraCarrito> listarDetalleCompraId(int id) {
		System.out.println("servicioMarco: "+id);
		return i_dcc.detallecompraListarIdSP(id);
	}

	@Override
	public int saveproducto(DetalleCompra p) {
		System.out.println("saveproductoDCS: "+p.getIddetallecompra());
		int res = 0;
		DetalleCompra producto = iproductocliente.save(p);
		if(!producto.equals(null)) {
			res = 1;
		}
		return res;
	}

	@Override
	public void deleteproducto(int id) {
		iproductocliente.deleteById(id);
	}
	
	/*Empezamos a implementar el metodo donde recogeremos y enviaremos por parametro cada valor de la interfaz del producto servicio*/
	public void guardarDetalleCompra(int usuario, int producto, int cantidad, double monto_total, String fecha) {
		/*Para obtener el idcliente*/
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		Login appUser = repo.findByUsername(auth.getName()).orElseThrow(() -> new UsernameNotFoundException("No existe usuario")); //Usar
		
		DetalleCompra p = new DetalleCompra();
		System.out.println("saveproductoService: "+appUser.getIdusuario());
		p.setIdusuario(appUser.getIdusuario());
		p.setIdproducto(producto);
		p.setCantidad(1);
		p.setMonto_total(monto_total);
		
		String dateTime = DateTimeFormatter.ofPattern("dd/MM/yyyy hh:mm:ss a").format(LocalDateTime.now());
		p.setFecha(dateTime);
		
		if (dateTime == null || dateTime.equals("")) {
			dateTime = "Error al obtener la fecha";
		}
		
		iproductocliente.save(p);

	}

	/*@Override
	public Optional<DetalleCompra> listarProductoId(int id) {
		return iproductocliente.findById(id);
	}*/
	
	/*Prueba*/
	@Override
	public Optional<DetalleCompra> listarEditDetalleCompraId2(int id) {
		System.out.println("DetalleCompraEdit "+id);
		return iproductocliente.editarcompraListarIdSP2(id);
	}
	
	@Override
	public boolean listarEditDetalleId(int id, int cant, double montot) {
		System.out.println("UpdateDetalleCompraEdit2 "+id);
		try {
			iproductocliente.updatecompraSP(id, cant, montot);
		} catch (Exception e) {
			// TODO: handle exception
		}
		return false;
	}
	/**/
	
	@Override
	public Optional<DetalleCompraCarrito> listarEditDetalleCompraId(int id) {
		System.out.println("DetalleCompraEdit "+id);
		return i_dcc.editarcompraListarIdSP(id);
	}
	
	//Monto total a pagar de todo los productos
	@Override
	public Optional<DetalleCompraCarrito> viewMontoTotalDetalleCompraId(int id) {
		System.out.println("DetalleCompraMontoTotal "+id);
		return i_dcc.montototalcompraclienteIdSP(id);
	}

}